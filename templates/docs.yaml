openapi: 3.0.3
info:
  title: MovieWatchlist API 
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5050
paths:
  /api/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { type: object, properties: { ok: { type: boolean } }, required: [ok] }

  /api/movies:
    get:
      summary: List movies (paginated)
      parameters:
        - in: query; name: q; schema: { type: string }
        - in: query; name: watched; schema: { type: string, enum: [true, false] }
        - in: query; name: order; schema: { type: string, enum: [-created_at, title, rating, -rating] }
        - in: query; name: page; schema: { type: integer, minimum: 1, default: 1 }
        - in: query; name: page_size; schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        '200':
          description: Paged movie list
          content:
            application/json:
              schema:
                type: object
                required: [page, page_size, total, items]
                properties:
                  page: { type: integer }
                  page_size: { type: integer }
                  total: { type: integer }
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Movie' }
        '400': { $ref: '#/components/responses/BadRequest' }
    post:
      summary: Create a movie (manual entry)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title: { type: string, maxLength: 255 }
                year:  { type: string, pattern: '^[0-9]{4}$' }
                personal_rating: { type: integer, minimum: 0, maximum: 10, nullable: true }
                watched: { type: boolean, default: false }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } } }
        '200': { description: Already existed (deduped), content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '415': { $ref: '#/components/responses/UnsupportedMediaType' }

  /api/movies/{id}:
    get:
      summary: Get a movie
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      summary: Update (replace fields)
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string, maxLength: 255 }
                year:  { type: string, pattern: '^[0-9]{4}$' }
                personal_rating: { type: integer, minimum: 0, maximum: 10, nullable: true }
                watched: { type: boolean }
                external_id: { type: string }
                source: { type: string, enum: [tmdb] }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      summary: Partial update
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1api~1movies~1{id}/put/requestBody/content/application~1json/schema'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Delete a movie
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses:
        '200': { description: Deleted, content: { application/json: { schema: { type: object, properties: { deleted: { type: integer } } } } } }
        '404': { $ref: '#/components/responses/NotFound' }

  /api/movies/{id}/toggle-watched:
    post:
      summary: Toggle watched flag
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { id: { type: integer }, watched: { type: boolean } }, required: [id, watched] } } } }
        '404': { $ref: '#/components/responses/NotFound' }

  /api/movies/{id}/rate:
    post:
      summary: Set personal rating
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, required: [personal_rating], properties: { personal_rating: { type: integer, minimum: 0, maximum: 10 } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { id: { type: integer }, title: { type: string }, personal_rating: { type: integer } }, required: [id, title, personal_rating] } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }

  /api/search/tmdb:
    get:
      summary: Search TMDB by title
      parameters: [ { in: query, name: q, required: true, schema: { type: string } } ]
      responses:
        '200':
          description: Results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        tmdb_id: { type: integer }
                        title:   { type: string }
                        year:    { type: string }
                required: [results]

  /api/movies/from-tmdb:
    post:
      summary: Create a movie from a TMDB id (also stores genres)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tmdb_id]
              properties:
                tmdb_id: { type: integer }
                watched: { type: boolean, default: false }
                personal_rating: { type: integer, minimum: 0, maximum: 10, nullable: true }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/MovieWithGenres' } } } }
        '200': { description: Already existed, content: { application/json: { schema: { $ref: '#/components/schemas/MovieWithGenres' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }

  /api/recommendations:
    get:
      summary: Recommend movies based on top genres of watched, highly-rated items
      parameters:
        - in: query; name: min_rating; schema: { type: integer, minimum: 0, maximum: 10, default: 8 }
        - in: query; name: k;          schema: { type: integer, minimum: 1, maximum: 10, default: 3 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  top_genres: { type: array, items: { type: integer } }
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        tmdb_id: { type: integer }
                        title: { type: string }
                        year: { type: string }
components:
  schemas:
    Movie:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        year: { type: string, nullable: true }
        external_id: { type: string, nullable: true }
        source: { type: string, nullable: true, enum: [tmdb] }
        personal_rating: { type: integer, nullable: true }
        watched: { type: boolean }
        poster_url: { type: string, nullable: true }
        overview: { type: string, nullable: true }
        created_at: { type: string }
        updated_at: { type: string }
      required: [id, title, watched, created_at, updated_at]
    MovieWithGenres:
      allOf:
        - $ref: '#/components/schemas/Movie'
        - type: object
          properties:
            genres: { type: array, items: { type: string } }
  responses:
    BadRequest:
      description: 400 Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                required: [status, code, message]
                properties:
                  status: { type: integer }
                  code:   { type: string }
                  message:{ type: string }
    UnsupportedMediaType:
      description: 415 Unsupported Media Type
      content:
        application/json:
          schema: { $ref: '#/components/responses/BadRequest/content/application~1json/schema' }
    NotFound:
      description: 404 Not Found
      content:
        application/json:
          schema: { $ref: '#/components/responses/BadRequest/content/application~1json/schema' }
